from pwn import *
import sys
sys.path.append('/home/seed/fuze/vminstance')
sys.path.append('/home/seed/fuze/neo4j_interface')
sys.path.append('/home/seed/fuze/concolicexecutor')
sys.path.append('/home/seed/fuze/dataflowanalyzer')
sys.path.append('/home/seed/fuze/statebroker')
import statebroker
import concolicexecutor
import vminstance
import dataflowanalyzer
import subprocess
import re
import random
import angr
import time

def test(gdbport=random.randint(12000,13000)):
    start_time = time.time()
    context.update(arch = 'amd64')
    '''
    vm = vminstance.vmInstance(qemu_config_file =\
            "/home/seed/fuze/qemuconfig.cfg"\
            , gdb_deamon_port = gdbport\
            , log_filename = 'vm_log_4557_ce.txt'\
            , start_grace_time = 10\
            , two_cpus = True\
            )

    #vm.run_gdb_deamon()
    #vm.run()
    #vm.connect()
   # vm.s.put('/home/seed/fuze/cve/exploit')
    #sh = vm.s.shell('/bin/sh')
    #sh.sendline("chmod +x ./exploit")
    
    gdb = dataflowanalyzer.DebuggerGdb(gdbport = 8888, qemu_gdbport = 8888\
            , vmlinux_path = "/home/seed/linux/linux/vmlinux")
    gdb.connectGdb()
    #gdb.c() 
    #sh.sendline("./exploit")
    obj_base=gdb.get_reg('rdx')
    print('uaf_obj base:', obj_base)
    '''
    r = remote('127.0.0.1', 7878)
    sb = statebroker.StateBroker()
    obj_base = int(sb.get_register(r,'rax'))
    r.close()
     
    callbacks_to_monitor = []
    callbacks_to_monitor.append('kfree_call_rcu')
    function_call_to_disable = []
    function_call_to_disable.append(0xffffffff811bc037)  # call mutex_lock
    function_call_to_disable.append(0xffffffff811bc058)  # call mutex_unlock
    extra_bp=[]
     
    ce = concolicexecutor.ConcolicExecutor("/home/seed/linux/linux/vmlinux")
    
    ce.setup(\
            qemu_port = 7878\
            ,debug_after_address_concretization = False\
            ,use_custom_concretization_strategy_first = True\
            ,pause_on_read_from_symbolic_address = False\
            ,pause_on_write_to_symbolic_address = False\
            ,pause_on_uninit_write=False \
            ,pause_on_each_step = False\
            ,pause_on_write_to_uaf_object_primitive = False\
            ,execution_time_limit = 60*10\
            ,pause_on_control_flow_hijack = True\
            ,concretization_range = 2\
            ,callback_functions_to_monitor = callbacks_to_monitor\
            ,expected_start_rip = 0xffffffff811bb1b2\
            ,assigned_start_time = start_time\
            ,function_call_to_disable = function_call_to_disable\
            ,detect_rcu_free = True\
            ,additional_symbolic_registers = ['r14']\
            ,extra_bp=extra_bp\
            )
    
    #remove_opts={angr.options.CONSERVATIVE_READ_STRATEGY}
    remove_opts={}
    ce.run(uaf_object_base = obj_base, uaf_object_size = 0xf8, do_rop = False, switch_cpu = True, remove_opts = remove_opts)
    '''
    #vm.shutdown()
    '''


test()

