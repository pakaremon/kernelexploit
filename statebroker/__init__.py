from pwn import *
import re

class StateBroker(object):
    def __init__(self, qemu_console_port = 7878, qemu_host = '127.0.0.1'):
        self.qemu_console_port = qemu_console_port
        self.qemu_host = qemu_host
    

    def parse_qemu_memory_dump(self,raw,addr,offset):
        lines = raw.split(b'\r\n')
        nums=[]
        con=b''
        for i,line in enumerate(lines):
            _ = line.split(b' ')[1:]
            nums+=_
        try:
            for _ in nums:
                con+=p64(int(_,16))
            return con
        except ValueError:
            return None

    def page_mapped(self, r, addr):
        cmd = 'x/bx '+str(addr)
        r.sendline(cmd)
        r.recvuntil(cmd)
        raw=r.recvuntil('(qemu)').strip('\r\n(qemu)').strip('\x1b[K\r\n')
        if 'Cannot access memory' in raw:
            return False
        return True

    def get_memory(self, r, addr,offset): #why we need the concrete value
        cmd='x /'+str(offset/8+1) + 'gx' + ' '+str(addr)
        r.sendline(cmd)
        r.recvuntil(cmd)
        raw=r.recvuntil('(qemu)')
        con = raw.decode('utf-8')
        print(con)
        #raw=r.recvuntil('(qemu)').strip(b'\r\n(qemu)').strip(b'\x1b[K\r\n')
        #con=self.parse_qemu_memory_dump(raw,addr,offset)
        return con

    def get_a_page(self, r, addr):
        cmd='x /512gx '+str(addr&0xfffffffffffff000)
        r.sendline(cmd)
        r.recvuntil(cmd)
        raw=r.recvuntil('(qemu)').strip(b'\r\n(qemu)').strip(b'\x1b[K\r\n')
        #print raw
        con=self.parse_qemu_memory_dump(raw,addr,4096)
        return con

    def set_cpu_number(self, r,number):
        cmd = 'cpu ' + str(number)
        r.sendline(cmd)
        r.recvuntil(cmd)

    def get_register(self, r,reg_name):
        if reg_name in ['rax','rbx','rcx','rdx','rsi','rdi','rsp','rbp','r8','r9','r10'\
                ,'r11','r12','r13','r14','r15','rip']:
            cmd='info registers'
            r.sendline(cmd)
            r.recvuntil(cmd)
            raw=r.recvuntil(b'(qemu)').strip(b'\r\n(qemu)').strip(b'\x1b[K\r\n')

            t1=raw.split(reg_name.upper().encode('utf-8'))
            t2=t1[1].split(b'=')
            val=int(b'0x'+t2[1][:16],16)
            print((reg_name, hex(val)))
            return val

        if reg_name == 'gs':
            cmd='info registers'
            r.sendline(cmd)
            val = r.recvuntil(cmd)
            raw = r.recvuntil('(qemu)').strip(b'\r\n(qemu)').strip(b'\x1b[K\r\n')

            regex = r"GS \=[\da-f]{4} ([\da-f]{16})"
            matchobj = re.search(regex, str(raw))
            raw = matchobj.group(1)
            val = int('0x'+raw,16)
            return val

    def take_snapshot(self, r, snapshot_name):
        # only qcow2 img support snapshot
        #TODO test this function
        self.stop_emulation(r)
        cmd = 'savevm ' + snapshot_name
        r.sendline(cmd)
        print(( r.recvuntil(cmd)))
        print((r.recvuntil('(qemu)')))
        return

    def stop_emulation(self, r):
        cmd = 'stop'
        r.sendline(cmd)
        print((r.recvuntil(cmd)))
        print((r.recvuntil('(qemu)')))
        return
    
    def load_snapshot(self, r, snapshot_name):
        self.stop_emulation(r)
        cmd = 'loadvm ' + snapshot_name
        r.sendline(cmd)
        print((r.recvuntil(cmd)))
        print((r.recvuntil('(qemu)')))
        return

    def rm_snapshot(selfs, r, snapshot_name):
        cmd = 'delvm ' + snapshot_name
        r.sendline(cmd)
        print((r.recvuntil(cmd)))
        print((r.recvuntil('(qemu)')))
        return

    def start_tracing(self, r, event_name='exec_tb*'):
        """
        before starting tracing, make sure the vm is in pause state
        :param r:
        :param event_name:
        :return:
        """
        cmd = 'trace-event ' + event_name + ' on'
        r.sendline(cmd)
        print((r.recvuntil(cmd)))
        print((r.recvuntil('(qemu)')))
        return

    def stop_tracing(self, r, event_name='exec_tb*'):
        """
        before stopping tracing, make sure the vm is in pause state
        :param r:
        :param event_name:
        :return:
        """
        cmd = 'trace-event ' + event_name + ' off'
        r.sendline(cmd)
        print((r.recvuntil(cmd)))
        print((r.recvuntil('(qemu)')))
        return

    def continue_emulation(self, r):
        cmd = 'c'
        r.sendline(cmd)
        print((r.recvuntil(cmd)))
        print((r.recvuntil('(qemu)')))
        return


def test():
    r = remote('127.0.0.1', 7878)
    sb = StateBroker()
    a = int(sb.get_register(r,'rax'))
    c = sb.get_a_page(r, int(a))
    print(c)

    #sb.get_register(r,'cs')
    #sb.get_register(r,'ss')
    #sb.get_register(r,'ds')
    #sb.get_register(r,'fs')

