# author ww9210
import angr
from pwn import *
import time


class ExploreRoutineMixin:
    def run(self, uaf_object_base = None, uaf_object_size=0
            , do_rop=False, switch_cpu=False, register_storing_ip='eax', add_opts={}, remove_opts={}):

        self.uaf_object_base = uaf_object_base
        self.uaf_object_size = uaf_object_size

        if do_rop:  # if we choose rop to bypass SMEP
            self.stack_pivot_address = self.prepare_krop_payload(register_storing_ip=register_storing_ip)

        extras = {angr.options.REVERSE_MEMORY_NAME_MAP,
                  angr.options.TRACK_ACTION_HISTORY,
                  angr.options.CONSERVATIVE_READ_STRATEGY,
                  angr.options.KEEP_IP_SYMBOLIC,
                  angr.options.CONSTRAINT_TRACKING_IN_SOLVER}

        for opt in add_opts:
            extras.add(opt)

        for opt in remove_opts:
            extras.remove(opt)

        def do_nothing(state):
            pass

        if self.function_call_to_disable is not None:
            for addr in self.function_call_to_disable:
                if type(addr) in [int,int]:
                    self.b.hook(addr, do_nothing, 5)
                elif type(addr) in [str]:
                    func_addr = self.k.symbols[addr]
                    self.b.hook(addr, do_nothing, 5)  # todo: should set bp at call site instead of func
                else:
                    assert 0

        s = self.b.factory.blank_state(addr=self.start_addr, add_options=extras)

        if self.concretization_range != 1024:
            s.memory.read_strategies[0]._limit = self.concretization_range

        if self.remove_range_concretize:
            s.memory.read_strategies = []
            #s.memory.write_strategies=[]

        if self.use_custom_concretization_strategy_first :
            self.add_concretization_strategy(s, self.name_concretization_strategy)

        self.add_instrumentation(s)

        s = self.get_initial_state(s, switch_cpu)

        # prepare symbolic memory
        print('[+] setting memory at', hex(self.uaf_object_base), 'of length', self.uaf_object_size, 'to symbolic value')
        self.uaf_bytes = []
        for i in range(self.uaf_object_size):
            symbolic_byte = s.se.BVS("uaf_obj"+str(i), 8)
            self.uaf_bytes.append(symbolic_byte)
            s.memory.store(self.uaf_object_base + i, symbolic_byte, inspect=False)

        # prepare symbolic registers
        if len(self.additional_symbolic_registers) > 0:
            for reg in self.additional_symbolic_registers:
                new_val = s.se.BVS("my"+reg, 64)
                s.registers.store(reg, new_val)

        self.debug_state(s)

        self.explore_by_pathgroup(s)
        self.dump_all_primitives()
        import IPython; IPython.embed()

        return

    def get_initial_state(self, s, switch_cpu=False):
        if self.debug_qemu_backend:
            self.r = remote('127.0.0.1', self.qemu_port)
            if switch_cpu:
                self.statebroker.set_cpu_number(self.r, 1)
            s = self.install_context(s)
            self.debug_state(s)
            if self.expected_start_rip is not None:
                if self.sol.eval(s.regs.rip, 1)[0] != self.expected_start_rip:
                    self.statebroker.set_cpu_number(self.r, 0)
            else:
                opt = input('switch cpu?[N/y]')
                print(opt)
                if 'y' in opt or 'Y' in opt:
                    self.statebroker.set_cpu_number(self.r, 0)
                    s = self.install_context(s)
                    self.debug_state(s)

            # getting start time of symbolic execution
            self.start_time_of_symbolic_execution = time.time()
            s = self.install_context(s)
            self.install_section(s, '.data')
            self.install_section(s, '.bss')
            self.install_section(s, '.brk')
            con = self.statebroker.get_a_page(self.r, self.uaf_object_base)  # install the page where the uaf object is
            self.set_concret_memory_region(s, self.uaf_object_base & 0xfffffffffffff000, con, 4096)
            con = self.statebroker.get_a_page(self.r, self.uaf_object_base + self.uaf_object_size)
            self.set_concret_memory_region(s, (self.uaf_object_base + self.uaf_object_size) & 0xfffffffffffff000, con, 4096)
            self.r.close()
        return s

