# author: ww9210
class HousesOnTheHeapMixin:
    def get_single_value_from_expr(self, expr):
        return self.sol.eval(expr, 1)[0]

    def is_meta_data_overwritten(self, write_primitive):
        expr = write_primitive['in_object_offset_to_write'] == 0
        val = self.get_single_value_from_expr(expr)
        if val == 1:
            return True
        else:
            return False

    def is_writing_self_reference(self, write_primitive):
        expr_to_write = write_primitive['expr_to_write']
        address_to_write = write_primitive['address_to_write']
        print('writing', expr_to_write, 'to', address_to_write)
        if self.get_single_value_from_expr(expr_to_write) ^ self.get_single_value_from_expr(address_to_write)\
                <= 0x1000:
            print('found self reference write primitive')
            return True
        return False

    def try_heap_metadata_exploit(self, write_primitive):
        if self.target_allocator == 'slub':
            if self.is_meta_data_overwritten(write_primitive):
                self.perform_free_ptr_hijack_slub(write_primitive)
            elif self.is_writing_self_reference(write_primitive):
                self.perform_shendi_attack(write_primitive)
            else:
                print('[-] this primitive does not write to heap metadata')
        else:
            return False
        return False

    def perform_free_ptr_hijack_slub(self, write_primitive):
        s = write_primitive['state']
        # dump history actions
        for action in s.actions:
            print(action)
        expr_to_write = write_primitive['expr_to_write']
        address_to_write = write_primitive['address_to_write']
        print('writing', expr_to_write, 'to', address_to_write)
        if self.get_single_value_from_expr(expr_to_write) ^ self.get_single_value_from_expr(address_to_write)\
                <= 0x100000:
            print('[+] loop in free-list ptr')
            if self.vulnerability_type == 'uaf':
                object_pairs = self.select_auxiliary_object_pair_for_free_ptr_loop(self.uaf_object_size)
                print('use object pairs:', object_pairs)
                import IPython; IPython.embed()
            else:
                pass
        return

    def perform_shendi_attack(self, write_primitive):
        # TODO implement this attack with reference to shendi's slides
        print(write_primitive)
        print('shendi\'s attack')
        import IPython; IPython.embed()
        return

