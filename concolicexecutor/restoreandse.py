from . import ConcolicExecutor
from pwn import *
import angr
from time import sleep

class RestoreAndSE(ConcolicExecutor):
    def qemu_interactive(self):
        sleep(0.2)
        if self.r == None:
            self.r = remote('127.0.0.1', self.qemu_port)
        self.r.interactive()
        self.r.close()
        self.r=None

    def save_snapshot(self, snapshotname):
        sleep(0.2)
        if self.r == None:
            self.r = remote('127.0.0.1', self.qemu_port)
        self.statebroker.take_snapshot(self.r, snapshotname)
        self.r.close()
        self.r=None

    def restore_snapshot(self, snapshotname):
        sleep(0.2)
        if self.r == None:
            self.r = remote('127.0.0.1', self.qemu_port)
        self.statebroker.load_snapshot(self.r, snapshotname)
        self.r.close()
        self.r=None

    #def run_from_snapshot(self, snapshotname\
    def run_from_snapshot(self\
            ,uaf_object_base = None, uaf_object_size = 0\
            ,userspace_base = 0xfacea000, do_rop = False, switch_cpu = False\
            ,add_opts={}, remove_opts={}):

        self.uaf_object_base = uaf_object_base
        self.uaf_object_size = uaf_object_size
        if do_rop:
            self.prepare_krop_payload()

        extras = {angr.options.REVERSE_MEMORY_NAME_MAP, \
                angr.options.TRACK_ACTION_HISTORY, \
                angr.options.CONSERVATIVE_READ_STRATEGY, \
                angr.options.CONSTRAINT_TRACKING_IN_SOLVER}

        for opt in add_opts:
            extras.add(opt)

        for opt in remove_opts:
            extras.remove(opt)

        if self.function_call_to_disable != None:
            for addr in self.function_call_to_disable:
                self.b.hook(addr,do_nothing,5)

        s = self.b.factory.blank_state(addr = self.start_addr, add_options=extras)

        if self.concretization_range != 1024:
            s.memory.read_strategies[0]._limit = self.concretization_range

        if self.remove_range_concretize:
            s.memory.read_strategies=[]
            #s.memory.write_strategies=[]

        if self.use_custom_concretization_strategy_first:
            self.add_concretization_strategy(s)

        self.add_instrumentation(s)

        if self.debug_qemu_backend:
            self.r = remote('127.0.0.1', self.qemu_port)
            #TODO test when restore successfully return 
            #self.restore_snapshot(snapshotname)
            #sleep(60)

            if switch_cpu:
                self.statebroker.set_cpu_number(self.r, 1)
            s = self.install_context(s)
            self.debug_state(s)
            if self.expected_start_rip!=None:
                if self.sol.eval(s.regs.rip,1)[0] != self.expected_start_rip:
                    self.statebroker.set_cpu_number(self.r, 0)
            else:
                opt=input('switch cpu?[N/y]')
                print(opt)
                if 'y' in opt or 'Y' in opt:
                    self.statebroker.set_cpu_number(self.r, 0)
                    s = self.install_context(s)
                    self.debug_state(s)

            #getting start time of symbolic execution
            self.start_time_of_symbolic_execution = time.time()
            s = self.install_context(s)
            self.install_section(s, '.data')
            self.install_section(s, '.bss')
            self.install_section(s, '.brk')
            con = self.statebroker.get_a_page(self.r, uaf_object_base)#install the page where the uaf object is
            self.set_concret_memory_region(s, uaf_object_base&0xfffffffffffff000, con, 4096)
            con = self.statebroker.get_a_page(self.r, uaf_object_base + uaf_object_size)
            self.set_concret_memory_region(s, (uaf_object_base + uaf_object_size)&0xfffffffffffff000, con, 4096)
            self.r.close()


        print('[+] setting memory at', hex(uaf_object_base), 'of length', uaf_object_size, 'to symbolic value')
        for i in range(uaf_object_size):
            s.memory.store(uaf_object_base + i, s.se.BVS("uaf_obj"+str(i), 8), inspect = False)

        self.debug_state(s)

        self.explore_by_pathgroup(s)
        self.dump_all_primitives()
        import IPython; IPython.embed()

        return 
            


    


