import angr
from pwn import *
import colorama


class ConcreteStateMixin:
    def init_reg_concrete(self, s):
        # assert self.r != None
        s.regs.rax = s.se.BVV(self.statebroker.get_register(self.r, "rax"), 64)
        s.regs.rbx = s.se.BVV(self.statebroker.get_register(self.r, "rbx"), 64)
        s.regs.rcx = s.se.BVV(self.statebroker.get_register(self.r, "rcx"), 64)
        s.regs.rdx = s.se.BVV(self.statebroker.get_register(self.r, "rdx"), 64)
        s.regs.rsi = s.se.BVV(self.statebroker.get_register(self.r, "rsi"), 64)
        s.regs.rdi = s.se.BVV(self.statebroker.get_register(self.r, "rdi"), 64)
        s.regs.rsp = s.se.BVV(self.statebroker.get_register(self.r, "rsp"), 64)
        s.regs.rbp = s.se.BVV(self.statebroker.get_register(self.r, "rbp"), 64)
        s.regs.r8 = s.se.BVV(self.statebroker.get_register(self.r, "r8"), 64)
        s.regs.r9 = s.se.BVV(self.statebroker.get_register(self.r, "r9"), 64)
        s.regs.r10 = s.se.BVV(self.statebroker.get_register(self.r, "r10"), 64)
        s.regs.r11 = s.se.BVV(self.statebroker.get_register(self.r, "r11"), 64)
        s.regs.r12 = s.se.BVV(self.statebroker.get_register(self.r, "r12"), 64)
        s.regs.r13 = s.se.BVV(self.statebroker.get_register(self.r, "r13"), 64)
        s.regs.r14 = s.se.BVV(self.statebroker.get_register(self.r, "r14"), 64)
        s.regs.r15 = s.se.BVV(self.statebroker.get_register(self.r, "r15"), 64)
        s.regs.rip = s.se.BVV(self.statebroker.get_register(self.r, "rip"), 64)
        # s.regs.fs = s.se.BVV(self.statebroker.get_register(self.r,"fs"), 64)
        s.regs.gs = s.se.BVV(self.statebroker.get_register(self.r, "gs"), 64)
        # s.regs.es = s.se.BVV(self.statebroker.get_register(self.r,"es"), 16)
        # s.regs.cs = s.se.BVV(self.statebroker.get_register(self.r,"cs"), 16)
        # s.regs.ss = s.se.BVV(self.statebroker.get_register(self.r,"ss"), 16)
        # s.regs.ds = s.se.BVV(self.statebroker.get_register(self.r,"ds"), 16)
        return s

    def install_context(self, s):
        s = self.init_reg_concrete(s)
        return s

    def install_section(self, s, name):
        r = self.r
        k = self.k
        section = k.get_section_by_name(name)
        section_offset = section.header['sh_addr']
        section_length = section.header['sh_size']
        if section_length % 4096 != 0:
            section_length = ((section_length / 4096) + 1) * 4096
        num_of_page = section_length / 4096
        print('installing', num_of_page, 'pages of section:', name)
        for i in range(num_of_page):
            # print i
            addr = section_offset + i * 4096
            con = self.statebroker.get_a_page(r, section_offset + i * 4096)
            if con is not None:
                self.set_concret_memory_region(s, addr, con, 4096)
            else:
                input('failed to get_a_page')
        print('Finished installing section:', name)
        return

    def set_concret_memory_region(self, s, addr, buf, length):
        aligned_addr = addr & 0xfffffffffffff000
        s.memory.store(aligned_addr, buf, inspect=False)
        return

    def add_instrumentations(self, s):
        return


