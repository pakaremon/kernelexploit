import angr


class DebuggingUtilMixin:
    def debug_state(self, state):
        b = self.b
        try:
            print('-----start dump_state-----')
            self.dump_reg(state)
            irsb = b.factory.block(state.addr).vex
            cap = b.factory.block(state.addr).capstone
            irsb.pp()
            cap.pp()
            print('-----end dump_state-----')
        except angr.errors.SimEngineError:
            print('angr.errors.SimEngineError')
            pass
        except angr.errors.SimValueError:
            print('angr.errors.SimValueError:')
            import IPython; IPython.embed()

    def debug_simgr(self, simgr):
        print('active:')
        for state in simgr.stashes['active']:
            self.debug_state(state)

    def dump_reg(self, state):
        print('rax:', state.regs.rax, 'r8', state.regs.r8)
        print('rbx:', state.regs.rbx, 'r9', state.regs.r9)
        print('rcx:', state.regs.rcx, 'r10', state.regs.r10)
        print('rdx:', state.regs.rdx, 'r11', state.regs.r11)
        print('rsi:', state.regs.rsi, 'r12', state.regs.r12)
        print('rdi:', state.regs.rdi, 'r13', state.regs.r13)
        print('rsp:', state.regs.rsp, 'r14', state.regs.r14)
        print('rbp:', state.regs.rbp, 'r15', state.regs.r15)
        print('gs:', state.regs.gs)
        return

