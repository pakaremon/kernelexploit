import angr
import colorama

class StatsExploreMixin:
    def dump_state_path_history(self, state):
        print('[+] Dumping history basic blocks:')
        for addr in state.history.bbl_addrs:
            print(hex(addr))
        print('[+] End dumping history basic blocks')

    def dump_all_primitives(self):
        print('[+] Dumping all primitives found')

        bbls = []
        # self.assigned_start_time = assigned_start_time
        # self.start_time_of_symbolic_execution = 0
        # colorama.Fore.RED + '[+] found an write_to_uaf_object primitive' + colorama.Style.RESET_ALL
        print(colorama.Fore.RED \
            , 'total number of primitives:', str(len(self.control_flow_hijack_primitive) \
                                                 + len(self.write_to_uaf_object_primitive) \
                                                 + len(self.write_to_symbolic_address_primitive) \
                                                 + len(self.memory_leak_primitive)) \
            , colorama.Style.RESET_ALL)

        print(colorama.Fore.RED \
            , '[+] number of control_flow_hijack_primitives:', len(self.control_flow_hijack_primitive) \
            , colorama.Style.RESET_ALL)
        for i, primitive in enumerate(self.control_flow_hijack_primitive):
            print('\ttime to find the', i, 'th primitive ', \
                str(primitive['timestamp'] - self.assigned_start_time))
            print('\t\tprimitive', primitive)
            print('\t\taddress:', hex(primitive['address']))
            print('\t\tblock_count:', primitive['state'].history.block_count)
            bbls.append(primitive['state'].history.block_count)

        print(colorama.Fore.RED \
            , '[+] number of write_to_symbolic_address_primitive:', len(self.write_to_symbolic_address_primitive) \
            , colorama.Style.RESET_ALL)
        for i, primitive in enumerate(self.write_to_symbolic_address_primitive):
            print('\ttime to find the', i, 'th primitive ', \
                str(primitive['timestamp'] - self.assigned_start_time))
            print('\t\tprimitive', primitive)
            print('\t\tblock_count', primitive['state'].history.block_count)
            bbls.append(primitive['state'].history.block_count)

        print(colorama.Fore.RED \
            , '[+] number of write_to_uaf_object_primitive:', len(self.write_to_uaf_object_primitive) \
            , colorama.Style.RESET_ALL)
        for i, primitive in enumerate(self.write_to_uaf_object_primitive):
            print('\ttime to find the', i, 'th primitive ', \
                str(primitive['timestamp'] - self.assigned_start_time))
            print('\t\tprimitive', primitive)
            print('\t\tblock_count', primitive['state'].history.block_count)
            bbls.append(primitive['state'].history.block_count)

        print(colorama.Fore.RED \
            , '[+] number of memory_leak_primitive:', len(self.memory_leak_primitive) \
            , colorama.Style.RESET_ALL)
        for i, primitive in enumerate(self.memory_leak_primitive):
            print('\ttime to find the', i, 'th primitive ', \
                str(primitive['timestamp'] - self.assigned_start_time))
            print('\t\tprimitive', primitive)
            print('\t\tblock_count', primitive['state'].history.block_count)
            bbls.append(primitive['state'].history.block_count)

        print('[+] max length', max(bbls))
        print('[+] min length', min(bbls))
        print('[+] average', sum(bbls) / len(bbls))
        # self.double_free_primitive=[] #double free primitive


