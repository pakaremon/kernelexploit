#!/usr/bin/python
from pwn import *
from multiprocessing import Process
import subprocess
import os
import socket
import sys
sys.path.append('/home/seed/fuze/qemuconfig')
import qemuconfig
context.update(arch = 'amd64')
context.log_level = 'warning'
from time import sleep
class vmInstance(object):
    def __init__(self, qemu_config_file, qemu_script=None
            , ssh_host='127.0.0.1'
            , log_filename='/home/seed/fuze/vm_log.txt'
            , gdb_deamon_port=2323
            , two_cpus=True
            , start_grace_time=10
            , enable_vmx=False
            , enable_kvm=False
            , enable_trace=False
            , trace_boot=False
            , trace_event="/tmp/events"
            , trace_output="trace"
            , use_disk_snapshot=False
            ):
        self._ssh_host = ssh_host
        self.qemu_config = qemuconfig.qemuConfig(qemu_config_file)
        self._qemu_process =None
        self.__FNULL = open(os.devnull, 'w')
        self._ssh_port = self.qemu_config.ssh_port
        self._ssh_keyfile = self.qemu_config.ssh_keyfile
        self.s = None
        self._gdb_deamon = None
        self._socat_gdb_pid = None
        self._gdb_pid = None
        s1, s2 = socket.socketpair()
        self.__read_qemu = s1
        self.__write_qemu = s2
        s1, s2 = socket.socketpair()
        self.__read_socat = s1
        self.__write_socat = s2
        self.log_filename = log_filename
        self._gdb_deamon_port = gdb_deamon_port
        self._two_cpus = two_cpus
        self.start_grace_time = start_grace_time
        self._enable_vmx = enable_vmx
        self._enable_kvm = enable_kvm
        self._enable_trace = enable_trace
        self._trace_event = trace_event
        self._trace_output = trace_output
        self._trace_boot = trace_boot
        self._use_disk_snapshot = use_disk_snapshot
        #self._qemu_s1 = remote.fromsocket(s1)
        #self._qemu_s2 = remote.fromsocket(s2)

        return

    def start_vm(self):
        assert self.qemu_config != None
        logfile = open(self.log_filename,'w')
        cmd = []
        cmd.append(self.qemu_config.qemu_path)
        cmd.append('-kernel')
        cmd.append(self.qemu_config.kernel_path)
        cmd.append('-append')
        cmd.append(f'"{self.qemu_config.append}"')
        cmd.append(f'-drive file={self.qemu_config.hda},format=raw')
        cmd.append('-net')
        cmd.append('user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:'+str(self.qemu_config.ssh_port)+'-:22')
        cmd.append('-net')
        cmd.append('nic,model=e1000')
        if self._use_disk_snapshot:
            cmd.append('-snapshot')  # disk snapshot
        if self._enable_kvm:
            cmd.append('-enable-kvm')
        if self._enable_vmx:
            cmd.append('-cpu')
            cmd.append('kvm64,+vmx')
        if self._enable_trace:
            if self._trace_boot:
                cmd.append('-trace')
                cmd.append('events=' + self._trace_event \
                        + ',file=' + self._trace_output)
            else:
                cmd.append('-trace')
                cmd.append('file='+self._trace_output)
        #cmd.append('-s -S') 
        cmd.append('-nographic')
        cmd.append('-m')
        cmd.append(self.qemu_config.ram_size)
        cmd.append('-smp')
        if self._two_cpus:
            cmd.append('2')
        else:
            cmd.append('1')
        cmd.append('-monitor')
        cmd.append('tcp:127.0.0.1:' + str(self.qemu_config.monitor_port)\
                + ',server,nowait')
        cmd.append('-gdb')
        cmd.append('tcp::' + str(self.qemu_config.gdb_port))
        cmd.append('-pidfile')
        cmd.append('/home/seed/fuze/vm.pid')
        cmd.append('2>&1 | tee /home/seed/fuze/vm.log')
        a = " ".join(cmd)
        with open('/home/seed/fuze/test_run.sh', 'w') as file:
            file.write(a)
        subprocess.check_output(a, shell=True, text=True)

    def run_qemu(self):
        self._qemu_process = Process(target=self.start_vm)
        
        print(self._qemu_process)
        self._qemu_process.start()
        
    def test_vm(self):
        pass

    def run(self, test_connection=True):
        self.run_qemu()

    def connect(self, name='root'):
        import paramiko
        private_key_path='/home/seed/myimage/bullseye.id_rsa'
        username='root'
        host='localhost'
        port=10021
        private_key_path='/home/seed/myimage/bullseye.id_rsa'
        self.s = pwnlib.tubes.ssh.ssh(user = username\
                        , host = host\
                        , port = port\
                        , keyfile = private_key_path\
                        , cache = False\
                        )


    def ssh_interactive(self): 
        self.s.interactive()

    def start_gdb_deamon(self):
        cmd = 'nc -lvnp ' + str(self._gdb_deamon_port)
        subprocess.check_output(cmd, shell=True, text=True)

    def run_gdb_deamon(self):
        self.start_gdb_deamon()

    def interrupt(self):
        self.interrupt_vm()

    def interrupt_vm(self):
        pass

    def save_vm_snapshot(self):
        '''
        we choose to implement the function in statebroker
        '''
        print('[-]implemented in statebroker')
        pass

    def shutdown(self):
        if os.path.exists('/home/seed/fuze/vm.pid'):
            
            with open('/home/seed/fuze/vm.pid') as file:
                a = file.read()
                cmd=f'kill {int(a)}'
                subprocess.check_output(cmd, shell=True, text=True)

    def __del__(self):
        self.shutdown()




