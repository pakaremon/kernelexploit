import subprocess
import shlex
import time
from pwn import *

class DebuggerGdb:
    def __init__(self, gdbport, qemu_gdbport, vmlinux_path):
        self.gdbport = gdbport
        self.qemu_gdbport = qemu_gdbport
        self.vmlinux_path = vmlinux_path
        self.s = None
        self.cmd = None

    def connectGdb(self):
        cmd = f"gdb -ex 'target remote localhost:{self.gdbport}'  {self.vmlinux_path}"
        self.s = process(cmd, shell=True)
        

    def loadVmlinux(self):
        pass

    def connectQemu(self):
        if self.s:
           self.s.interactive() 

    def c(self):
        if self.s:
            self.s.sendline('c')
            self.s.recvuntil('gdb')

    def get_reg(self, register):
        if self.s:
            self.s.sendline(f"info registers {register}")
            self.s.recvuntil(register, timeout=1).decode('utf-8')
            output = self.s.recvuntil('gdb')
            raw = output.strip(b' ').split(b'gdb')[0].split(b' ')[0]
            val = raw.decode('utf-8')
            result = int(val, 16)
            #return output.split(":")[1].strip()
            return result

    def catch(self):
        if self.s:
            self.s.sendline("catch catch")
            self.s.recvuntil('gdb')

    def bt(self):
        if self.s:
            self.s.sendline('bt')

    def is_current_process(self, process_name):
        '''fuction return true or false'''
        if self.s:
            self.s.sendline("info inferiors")
            self.s.recvuntil('Num  Description       Executable', timeout=1)
            raw=self.s.recvuntil('gdb', timeout=1)
            val = raw.split(b'gdb')[0].strip(b' ').decode('utf-8')
            if process_name in val:
                return True
            else:
                return False

    def set_breakpoint(self, file_path, line_number):
        pass

    def b(self, bline):
        if self.s:
            self.s.sendline(f"b {bline}")
            



