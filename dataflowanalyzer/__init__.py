import subprocess
import shlex
import time

class DebuggerGdb:
    def __init__(self, gdbport, qemu_gdbport, vmlinux_path):
        self.gdbport = gdbport
        self.qemu_gdbport = qemu_gdbport
        self.vmlinux_path = vmlinux_path
        self.b = None

    def connect_gdb(self):
        gdb_command = f"gdb -ex 'target remote localhost:{self.gdbport}'"
        self.b = subprocess.Popen(shlex.split(gdb_command), stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True)
        time.sleep(1)  # Allow time for GDB to connect

    def load_vmlinux(self):
        if self.b:
            self.b.stdin.write(f"symbol-file {self.vmlinux_path}\n")
            self.b.stdin.flush()
            time.sleep(1)  # Allow time for loading symbols

    def connect_qemu(self):
        qemu_command = f"qemu-system-x86_64 -s -S -kernel bzImage -hda rootdisk.img -append 'root=/dev/hda' -gdb tcp:: {self.qemu_gdbport}"
        subprocess.Popen(shlex.split(qemu_command))

    def c(self):
        if self.b:
            self.b.stdin.write("c\n")
            self.b.stdin.flush()

    def get_reg(self):
        if self.b:
            self.b.stdin.write("info registers\n")
            self.b.stdin.flush()
            output = self.b.stdout.readline()
            return output

    def catch(self):
        if self.b:
            self.b.stdin.write("catch syscall\n")
            self.b.stdin.flush()

    def bt(self):
        if self.b:
            self.b.stdin.write("bt\n")
            self.b.stdin.flush()
            output = self.b.stdout.readlines()
            return output

    def is_current_process(self):
        if self.b:
            self.b.stdin.write("info inferiors\n")
            self.b.stdin.flush()
            output = self.b.stdout.readlines()
            return "currently" in output[1].lower()

    def set_breakpoint(self, file_path, line_number):
        if self.b:
            self.b.stdin.write(f"b {file_path}:{line_number}\n")
            self.b.stdin.flush()

def test():
    debugger = DebuggerGdb(gdbport=1234, qemu_gdbport=4321, vmlinux_path="vmlinux")
    debugger.connect_gdb()
    debugger.load_vmlinux()
    debugger.connect_qemu()
    debugger.set_breakpoint(file_path="/home/cong/malware/a.out", line_number=707)
    debugger.c()

